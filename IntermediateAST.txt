[SignatureD (TySig {ty_name = "frac", qual_ty = [], fun_type = [FunVar LRational], fun_bind = EmptyB}),
ValueD (FBind {fun_name = "frac", patt_args = [], matches = [MP {bound_var = [], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = OperApp (Litr (Ints 1)) (Var "/") (Litr (Ints 2))}], loc_binds = EmptyLocBinds}}]}),
TyClassD (SynDecls {syn_name = "Name", qualTy_var = [], syn_body = TypeVar "String"}),
TyClassD (SynDecls {syn_name = "ResultFunction", qualTy_var = ["a","b"], syn_body = FType [FunVar LAlphaA,AppTy (AppTy (FunVar LEither) (TypeVar "String")) (TypeVar "b")]}),
TyClassD (DataDecls {defn_type = DataTy, data_name = "Something", qualTy_var = ["a","b"], dataDefn_cons = [DefnConsDetail "Blah" [FunVar LAlphaA],DefnConsDetail "Bleh" [TypeVar "b"]], deriv_clause = []}),
TyClassD (DataDecls {defn_type = DataTy, data_name = "Color", qualTy_var = [], dataDefn_cons = [DefnConsDetail "Red" [],DefnConsDetail "Green" [],DefnConsDetail "Blue" []], deriv_clause = []}),
TyClassD (DataDecls {defn_type = DataTy, data_name = "Tree", qualTy_var = ["a"], dataDefn_cons = [DefnConsDetail "Empty" [],DefnConsDetail "Node" [FunVar LAlphaA,ParaTy (AppTy (TypeVar "Tree") (FunVar LAlphaA)),ParaTy (AppTy (TypeVar "Tree") (FunVar LAlphaA))]], deriv_clause = []}),
TyClassD (DataDecls {defn_type = DataTy, data_name = "Tree2", qualTy_var = [], dataDefn_cons = [DefnConsDetail "Nil" [],DefnConsDetail "Nod" [TypeVar "Int",TypeVar "Tree2",TypeVar "Tree2"]], deriv_clause = []}),
SignatureD (TySig {ty_name = "add", qual_ty = [], fun_type = [TypeVar "Int",TypeVar "Int",TypeVar "Int"], fun_bind = EmptyB}),
ValueD (FBind {fun_name = "add", patt_args = ["a","b"], matches = [MP {bound_var = [VariPatt "a",VariPatt "b"], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = OperApp (Var "a") (Var "+") (Var "b")}], loc_binds = EmptyLocBinds}}]}),
SignatureD (TySig {ty_name = "abc", qual_ty = [], fun_type = [TypeVar "Int"], fun_bind = EmptyB}),
ValueD (FBind {fun_name = "abc", patt_args = [], matches = [MP {bound_var = [], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = Litr (Ints 13)}], loc_binds = EmptyLocBinds}}]}),
SignatureD (TySig {ty_name = "random", qual_ty = [], fun_type = [TypeVar "Int",ListTy (TypeVar "Int"),TypeVar "Int"], fun_bind = EmptyB}),
ValueD (FBind {fun_name = "random", patt_args = ["x","ys"], matches = [MP {bound_var = [VariPatt "x",ConPatt {con_type = "[]", patt_details = ConPattPrefix {p_arg = []}}], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = Var "x"}], loc_binds = EmptyLocBinds}},MP {bound_var = [VariPatt "x",ParPatt (ConPatt {con_type = ":", patt_details = ConPattInfix {p_arg1 = "y", p_arg2 = "ys"}})], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = OperApp (Var "x") (Var "-") (Litr (Ints 1))}], loc_binds = EmptyLocBinds}}]}),
SignatureD (TySig {ty_name = "categorizeNumber", qual_ty = [], fun_type = [TypeVar "Int",TypeVar "String"], fun_bind = EmptyB}),
ValueD (FBind {fun_name = "categorizeNumber", patt_args = ["x"], matches = [MP {bound_var = [VariPatt "x"], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [BodyStmts (OperApp (Var "x") (Var "<") (Litr (Ints 0)))], guard_expr = Litr (Strings "Negative")},StmtBody {guard_stmt = [BodyStmts (OperApp (Var "x") (Var "==") (Litr (Ints 0)))], guard_expr = Litr (Strings "Zero")},StmtBody {guard_stmt = [BodyStmts (OperApp (Var "x") (Var "<") (Litr (Ints 10)))], guard_expr = Litr (Strings "Small")},StmtBody {guard_stmt = [BodyStmts (Var "otherwise")], guard_expr = Litr (Strings "Large")}], loc_binds = EmptyLocBinds}}]}),
SignatureD (TySig {ty_name = "calculateArea", qual_ty = [], fun_type = [TypeVar "Float",TypeVar "Float"], fun_bind = EmptyB}),
ValueD (FBind {fun_name = "calculateArea", patt_args = ["r"], matches = [MP {bound_var = [VariPatt "r"], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = LetExpr (ValsBinds [FBind {fun_name = "pi", patt_args = [], matches = [MP {bound_var = [], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = Litr (Fractionals 3.14)}], loc_binds = EmptyLocBinds}}]}] []) (OperApp (OperApp (Var "pi") (Var "*") (Var "r")) (Var "*") (Var "r"))}], loc_binds = EmptyLocBinds}}]}),
SignatureD (TySig {ty_name = "calculateRandom", qual_ty = [], fun_type = [TypeVar "Int",TypeVar "Int"], fun_bind = EmptyB}),
ValueD (FBind {fun_name = "calculateRandom", patt_args = ["x"], matches = [MP {bound_var = [VariPatt "x"], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = LetExpr (ValsBinds [FBind {fun_name = "y", patt_args = [], matches = [MP {bound_var = [], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = Litr (Ints 10)}], loc_binds = EmptyLocBinds}}]},FBind {fun_name = "z", patt_args = [], matches = [MP {bound_var = [], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = Litr (Ints 2)}], loc_binds = EmptyLocBinds}}]}] []) (OperApp (OperApp (Var "x") (Var "+") (Var "y")) (Var "+") (Var "z"))}], loc_binds = EmptyLocBinds}}]}),
SignatureD (TySig {ty_name = "nthElement", qual_ty = [], fun_type = [ListTy (FunVar LAlphaA),TypeVar "Int",AppTy (FunVar LMaybe) (FunVar LAlphaA)], fun_bind = EmptyB}),
ValueD (FBind {fun_name = "nthElement", patt_args = ["xs","b"], matches = [MP {bound_var = [ConPatt {con_type = "[]", patt_details = ConPattPrefix {p_arg = []}},VariPatt "b"], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = SpecialVar VNothing}], loc_binds = EmptyLocBinds}},MP {bound_var = [ParPatt (ConPatt {con_type = ":", patt_details = ConPattInfix {p_arg1 = "x", p_arg2 = "xs"}}),VariPatt "b"], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [BodyStmts (OperApp (Var "b") (Var "<=") (Litr (Ints 0)))], guard_expr = SpecialVar VNothing},StmtBody {guard_stmt = [BodyStmts (OperApp (Var "b") (Var "==") (Litr (Ints 1)))], guard_expr = App (SpecialVar VJust) (Var "x")},StmtBody {guard_stmt = [BodyStmts (Var "otherwise")], guard_expr = App (App (Var "nthElement") (Var "xs")) (ParaExpr (OperApp (Var "b") (Var "-") (Litr (Ints 1))))}], loc_binds = EmptyLocBinds}}]}),
SignatureD (TySig {ty_name = "insert", qual_ty = [], fun_type = [TypeVar "Int",ListTy (TypeVar "Int"),ListTy (TypeVar "Int")], fun_bind = EmptyB}),
ValueD (FBind {fun_name = "insert", patt_args = ["x","ys"], matches = [MP {bound_var = [VariPatt "x",ConPatt {con_type = "[]", patt_details = ConPattPrefix {p_arg = []}}], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = ExpList [Var "x"]}], loc_binds = EmptyLocBinds}},MP {bound_var = [VariPatt "x",ParPatt (ConPatt {con_type = ":", patt_details = ConPattInfix {p_arg1 = "y", p_arg2 = "ys"}})], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = IfExpr (OperApp (Var "x") (Var "<") (Var "y")) (OperApp (OperApp (Var "x") (Var ":") (Var "y")) (Var ":") (Var "ys")) (OperApp (Var "y") (Var ":") (App (App (Var "insert") (Var "x")) (Var "ys")))}], loc_binds = EmptyLocBinds}}]}),
SignatureD (TySig {ty_name = "insertionSort", qual_ty = [], fun_type = [ListTy (TypeVar "Int"),ListTy (TypeVar "Int")], fun_bind = EmptyB}),
ValueD (FBind {fun_name = "insertionSort", patt_args = ["xs"], matches = [MP {bound_var = [ConPatt {con_type = "[]", patt_details = ConPattPrefix {p_arg = []}}], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = Var "[]"}], loc_binds = EmptyLocBinds}},MP {bound_var = [ParPatt (ConPatt {con_type = ":", patt_details = ConPattInfix {p_arg1 = "x", p_arg2 = "xs"}})], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = App (App (Var "insert") (Var "x")) (ParaExpr (App (Var "insertionSort") (Var "xs")))}], loc_binds = EmptyLocBinds}}]}),
SignatureD (TySig {ty_name = "applyFunc", qual_ty = [], fun_type = [ParaTy (FType [TypeVar "Int",TypeVar "Int"]),TypeVar "Int",TypeVar "Int"], fun_bind = EmptyB}),
ValueD (FBind {fun_name = "applyFunc", patt_args = ["f","x"], matches = [MP {bound_var = [VariPatt "f",VariPatt "x"], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = App (Var "f") (Var "x")}], loc_binds = EmptyLocBinds}}]}),
ValueD (FBind {fun_name = "main", patt_args = [], matches = [MP {bound_var = [], guard_body = Guards {guard_exprs = [StmtBody {guard_stmt = [], guard_expr = App (SpecialVar VPutStr) (Litr (Strings "Hello World"))}], loc_binds = EmptyLocBinds}}]})]